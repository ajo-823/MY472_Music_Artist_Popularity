#table$Certified_Units <- updated_cert
# Update Claimed Sales to single number
#updated_claimed <- c()
#for (sales in table$Claimed_Sales) {
#updated_claimed <- append(updated_claimed,parse_num_list(sales,"mean"))
#}
#table$Claimed_Sales <- updated_claimed
table <- table %>%
mutate(Clean_Claimed_Sales = lapply(Claimed_Sales, parse_num_list, func = "mean")) %>%
mutate(Clean_Cert_Sales = lapply(Certified_Units, parse_num_list, func = "max"))
# Update Genre to list of genres
table$Genre <- clean_genres(table$Genre)
# Return table
return(table)
}
test_table <- clean_wiki_table(above_250mill)
print(test_table)
# Function to parse list of numbers from text
parse_num_list <- function(chars, func = NULL) {
# Define pattern for parsing strings to numbers
parse_num_pattern <- "\\b\\d{1,3}(,\\d{3})*(\\.\\d+)?\\b"
# Extract all numbers in the given string
all_numbers <- str_extract_all(chars, parse_num_pattern)
all_numbers <- as.numeric(gsub(",", "", unlist(all_numbers)))
# Handle case of "million" and "billion" numbers
if (grepl("million", chars)) {
all_numbers <- lapply(all_numbers,function(i){i*1000000})
} else if (grepl("billion", chars)) {
all_numbers <- lapply(all_numbers,function(i){i*1000000000})
}
# Return list of numbers, max, or mean depending on "func" input
if (func == "max") {
print("found max")
return(max(unlist(all_numbers)))
} else if (func == "mean") {
print("found mean")
return(mean(unlist(all_numbers)))
} else {
return(all_numbers)
}
}
# Remove bracket numbers
remove_bracket_num <- function(input_string) {
# Return string without bracket numbers
updated_string <- gsub("\\[\\d+\\]", "", input_string)
return(updated_string)
}
# Clean list of genres
clean_genres <- function(input_string) {
# Return cleaned list of genres
updated_string <- gsub(" /",",",input_string)
return(updated_string)
}
# Function to clean wikipedia table
clean_wiki_table <- function(table) {
# Update header
colnames(table) <- c("Artist","Country","Period_Active","Year_First_Charted",
"Genre","Certified_Units","Claimed_Sales")
# Remove bracket numbers
table <- apply(table, c(1,2), remove_bracket_num)
table <- data.frame(table)
# Update Certified Units to single number
#updated_cert <- c()
#for (sales in table$Certified_Units) {
#updated_cert <- append(updated_cert,parse_num_list(sales,"max"))
#}
#table$Certified_Units <- updated_cert
# Update Claimed Sales to single number
#updated_claimed <- c()
#for (sales in table$Claimed_Sales) {
#updated_claimed <- append(updated_claimed,parse_num_list(sales,"mean"))
#}
#table$Claimed_Sales <- updated_claimed
table <- table %>%
mutate(Claimed_Sales = lapply(Claimed_Sales, parse_num_list, func = "mean")) %>%
mutate(Certified_Sales = lapply(Certified_Units, parse_num_list, func = "max"))
# Update Genre to list of genres
table$Genre <- clean_genres(table$Genre)
# Return table
return(table)
}
test_table <- clean_wiki_table(above_250mill)
print(test_table)
# Function to parse list of numbers from text
parse_num_list <- function(chars, func = NULL) {
# Define pattern for parsing strings to numbers
parse_num_pattern <- "\\b\\d{1,3}(,\\d{3})*(\\.\\d+)?\\b"
# Extract all numbers in the given string
all_numbers <- str_extract_all(chars, parse_num_pattern)
all_numbers <- as.numeric(gsub(",", "", unlist(all_numbers)))
# Handle case of "million" and "billion" numbers
if (grepl("million", chars)) {
all_numbers <- lapply(all_numbers,function(i){i*1000000})
} else if (grepl("billion", chars)) {
all_numbers <- lapply(all_numbers,function(i){i*1000000000})
}
# Return list of numbers, max, or mean depending on "func" input
if (func == "max") {
print("found max")
return(max(unlist(all_numbers)))
} else if (func == "mean") {
print("found mean")
return(mean(unlist(all_numbers)))
} else {
return(all_numbers)
}
}
# Remove bracket numbers
remove_bracket_num <- function(input_string) {
# Return string without bracket numbers
updated_string <- gsub("\\[\\d+\\]", "", input_string)
return(updated_string)
}
# Clean list of genres
clean_genres <- function(input_string) {
# Return cleaned list of genres
updated_string <- gsub(" /",",",input_string)
return(updated_string)
}
# Function to clean wikipedia table
clean_wiki_table <- function(table) {
# Update header
colnames(table) <- c("Artist","Country","Period_Active","Year_First_Charted",
"Genre","Certified_Units","Claimed_Sales")
# Remove bracket numbers
table <- apply(table, c(1,2), remove_bracket_num)
table <- data.frame(table)
table <- table %>%
mutate(Claimed_Sales = sapply(lapply(Claimed_Sales, parse_num_list, func = "mean"))) %>%
mutate(Certified_Units = sapply(lapply(Certified_Units, parse_num_list, func = "max")))
# Update Genre to list of genres
table$Genre <- clean_genres(table$Genre)
# Return table
return(table)
}
test_table <- clean_wiki_table(above_250mill)
# Function to parse list of numbers from text
parse_num_list <- function(chars, func = NULL) {
# Define pattern for parsing strings to numbers
parse_num_pattern <- "\\b\\d{1,3}(,\\d{3})*(\\.\\d+)?\\b"
# Extract all numbers in the given string
all_numbers <- str_extract_all(chars, parse_num_pattern)
all_numbers <- as.numeric(gsub(",", "", unlist(all_numbers)))
# Handle case of "million" and "billion" numbers
if (grepl("million", chars)) {
all_numbers <- lapply(all_numbers,function(i){i*1000000})
} else if (grepl("billion", chars)) {
all_numbers <- lapply(all_numbers,function(i){i*1000000000})
}
# Return list of numbers, max, or mean depending on "func" input
if (func == "max") {
print("found max")
return(max(unlist(all_numbers)))
} else if (func == "mean") {
print("found mean")
return(mean(unlist(all_numbers)))
} else {
return(all_numbers)
}
}
# Remove bracket numbers
remove_bracket_num <- function(input_string) {
# Return string without bracket numbers
updated_string <- gsub("\\[\\d+\\]", "", input_string)
return(updated_string)
}
# Clean list of genres
clean_genres <- function(input_string) {
# Return cleaned list of genres
updated_string <- gsub(" /",",",input_string)
return(updated_string)
}
# Function to clean wikipedia table
clean_wiki_table <- function(table) {
# Update header
colnames(table) <- c("Artist","Country","Period_Active","Year_First_Charted",
"Genre","Certified_Units","Claimed_Sales")
# Remove bracket numbers
table <- apply(table, c(1,2), remove_bracket_num)
table <- data.frame(table)
table <- table %>%
mutate(Claimed_Sales = sapply(lapply(Claimed_Sales, parse_num_list, func = "mean"), `[`, 1)) %>%
mutate(Certified_Units = sapply(lapply(Certified_Units, parse_num_list, func = "max"), `[`, 1))
# Update Genre to list of genres
table$Genre <- clean_genres(table$Genre)
# Return table
return(table)
}
test_table <- clean_wiki_table(above_250mill)
print(test_table)
# Function to parse list of numbers from text
parse_num_list <- function(chars, func = NULL) {
# Define pattern for parsing strings to numbers
parse_num_pattern <- "\\b\\d{1,3}(,\\d{3})*(\\.\\d+)?\\b"
# Extract all numbers in the given string
all_numbers <- str_extract_all(chars, parse_num_pattern)
all_numbers <- as.numeric(gsub(",", "", unlist(all_numbers)))
# Handle case of "million" and "billion" numbers
if (grepl("million", chars)) {
all_numbers <- lapply(all_numbers,function(i){i*1000000})
} else if (grepl("billion", chars)) {
all_numbers <- lapply(all_numbers,function(i){i*1000000000})
}
# Return list of numbers, max, or mean depending on "func" input
if (func == "max") {
print("found max")
return(max(unlist(all_numbers)))
} else if (func == "mean") {
print("found mean")
return(mean(unlist(all_numbers)))
} else {
return(all_numbers)
}
}
# Remove bracket numbers
remove_bracket_num <- function(input_string) {
# Return string without bracket numbers
updated_string <- gsub("\\[\\d+\\]", "", input_string)
return(updated_string)
}
# Clean list of genres
clean_genres <- function(input_string) {
# Return cleaned list of genres
updated_string <- gsub(" /",",",input_string)
return(updated_string)
}
# Function to clean wikipedia table
clean_wiki_table <- function(table) {
# Update header
colnames(table) <- c("Artist","Country","Period_Active","Year_First_Charted",
"Genre","Certified_Units","Claimed_Sales")
# Remove bracket numbers
table <- apply(table, c(1,2), remove_bracket_num)
table <- data.frame(table)
table <- table %>%
mutate(Claimed_Sales = sapply(lapply(Claimed_Sales, parse_num_list, func = "mean"), `[`, 1)) %>%
mutate(Certified_Units = sapply(lapply(Certified_Units, parse_num_list, func = "max"), `[`, 1)) %>%
mutate(Genre = lapply(Genre,clean_genres))
# Return table
return(table)
}
test_table <- clean_wiki_table(above_250mill)
print(test_table)
# Function to parse list of numbers from text
parse_num_list <- function(chars, func = NULL) {
# Define pattern for parsing strings to numbers
parse_num_pattern <- "\\b\\d{1,3}(,\\d{3})*(\\.\\d+)?\\b"
# Extract all numbers in the given string
all_numbers <- str_extract_all(chars, parse_num_pattern)
all_numbers <- as.numeric(gsub(",", "", unlist(all_numbers)))
# Handle case of "million" and "billion" numbers
if (grepl("million", chars)) {
all_numbers <- lapply(all_numbers,function(i){i*1000000})
} else if (grepl("billion", chars)) {
all_numbers <- lapply(all_numbers,function(i){i*1000000000})
}
# Return list of numbers, max, or mean depending on "func" input
if (func == "max") {
print("found max")
return(max(unlist(all_numbers)))
} else if (func == "mean") {
print("found mean")
return(mean(unlist(all_numbers)))
} else {
return(all_numbers)
}
}
# Remove bracket numbers
remove_bracket_num <- function(input_string) {
# Return string without bracket numbers
updated_string <- gsub("\\[\\d+\\]", "", input_string)
return(updated_string)
}
# Clean list of genres
clean_genres <- function(input_string) {
# Return cleaned list of genres
updated_string <- gsub(" /",",",input_string)
return(updated_string)
}
# Function to clean wikipedia table
clean_wiki_table <- function(table) {
# Update header
colnames(table) <- c("Artist","Country","Period_Active","Year_First_Charted",
"Genre","Certified_Units","Claimed_Sales")
# Remove bracket numbers
table <- apply(table, c(1,2), remove_bracket_num)
table <- data.frame(table)
table <- table %>%
mutate(Claimed_Sales = sapply(lapply(Claimed_Sales, parse_num_list, func = "mean"), `[`, 1)) %>%
mutate(Certified_Units = sapply(lapply(Certified_Units, parse_num_list, func = "max"), `[`, 1)) %>%
mutate(Genre = sapply(lapply(Genre,clean_genres), `[`, 1))
# Return table
return(table)
}
test_table <- clean_wiki_table(above_250mill)
print(test_table)
# Function to parse list of numbers from text
parse_num_list <- function(chars, func = NULL) {
# Define pattern for parsing strings to numbers
parse_num_pattern <- "\\b\\d{1,3}(,\\d{3})*(\\.\\d+)?\\b"
# Extract all numbers in the given string
all_numbers <- str_extract_all(chars, parse_num_pattern)
all_numbers <- as.numeric(gsub(",", "", unlist(all_numbers)))
# Handle case of "million" and "billion" numbers
if (grepl("million", chars)) {
all_numbers <- lapply(all_numbers,function(i){i*1000000})
} else if (grepl("billion", chars)) {
all_numbers <- lapply(all_numbers,function(i){i*1000000000})
}
# Return list of numbers, max, or mean depending on "func" input
if (func == "max") {
print("found max")
return(max(unlist(all_numbers)))
} else if (func == "mean") {
print("found mean")
return(mean(unlist(all_numbers)))
} else {
return(all_numbers)
}
}
# Remove bracket numbers
remove_bracket_num <- function(input_string) {
# Return string without bracket numbers
updated_string <- gsub("\\[\\d+\\]", "", input_string)
return(updated_string)
}
# Clean list of genres
clean_genres <- function(input_string) {
# Return cleaned list of genres
updated_string <- gsub(" /",",",input_string)
return(updated_string)
}
# Function to clean wikipedia table
clean_wiki_table <- function(table) {
# Update header
colnames(table) <- c("Artist","Country","Period_Active","Year_First_Charted",
"Genre","Certified_Units","Claimed_Sales")
# Remove bracket numbers
# table <- apply(table, c(1,2), remove_bracket_num)
table <- data.frame(table)
table <- table %>%
mutate_all(funs(remove_bracket_num(.))) %>%
mutate(Claimed_Sales = sapply(lapply(Claimed_Sales, parse_num_list, func = "mean"), `[`, 1)) %>%
mutate(Certified_Units = sapply(lapply(Certified_Units, parse_num_list, func = "max"), `[`, 1)) %>%
mutate(Genre = sapply(lapply(Genre,clean_genres), `[`, 1))
# Return table
return(table)
}
test_table <- clean_wiki_table(above_250mill)
print(test_table)
# Function to parse list of numbers from text
parse_num_list <- function(chars, func = NULL) {
# Define pattern for parsing strings to numbers
parse_num_pattern <- "\\b\\d{1,3}(,\\d{3})*(\\.\\d+)?\\b"
# Extract all numbers in the given string
all_numbers <- str_extract_all(chars, parse_num_pattern)
all_numbers <- as.numeric(gsub(",", "", unlist(all_numbers)))
# Handle case of "million" and "billion" numbers
if (grepl("million", chars)) {
all_numbers <- lapply(all_numbers,function(i){i*1000000})
} else if (grepl("billion", chars)) {
all_numbers <- lapply(all_numbers,function(i){i*1000000000})
}
# Return list of numbers, max, or mean depending on "func" input
if (func == "max") {
print("found max")
return(max(unlist(all_numbers)))
} else if (func == "mean") {
print("found mean")
return(mean(unlist(all_numbers)))
} else {
return(all_numbers)
}
}
# Remove bracket numbers
remove_bracket_num <- function(input_string) {
# Return string without bracket numbers
updated_string <- gsub("\\[\\d+\\]", "", input_string)
return(updated_string)
}
# Clean list of genres
clean_genres <- function(input_string) {
# Return cleaned list of genres
updated_string <- gsub(" /",",",input_string)
return(updated_string)
}
# Function to clean wikipedia table
clean_wiki_table <- function(table) {
# Update header
colnames(table) <- c("Artist","Country","Period_Active","Year_First_Charted",
"Genre","Certified_Units","Claimed_Sales")
# Remove bracket numbers
# table <- apply(table, c(1,2), remove_bracket_num)
# table <- data.frame(table)
table <- table %>%
mutate_all(funs(remove_bracket_num(.))) %>%
mutate(Claimed_Sales = sapply(lapply(Claimed_Sales, parse_num_list, func = "mean"), `[`, 1)) %>%
mutate(Certified_Units = sapply(lapply(Certified_Units, parse_num_list, func = "max"), `[`, 1)) %>%
mutate(Genre = sapply(lapply(Genre,clean_genres), `[`, 1))
# Return table
return(table)
}
test_table <- clean_wiki_table(above_250mill)
print(test_table)
# Function to parse list of numbers from text
parse_num_list <- function(chars, func = NULL) {
# Define pattern for parsing strings to numbers
parse_num_pattern <- "\\b\\d{1,3}(,\\d{3})*(\\.\\d+)?\\b"
# Extract all numbers in the given string
all_numbers <- str_extract_all(chars, parse_num_pattern)
all_numbers <- as.numeric(gsub(",", "", unlist(all_numbers)))
# Handle case of "million" and "billion" numbers
if (grepl("million", chars)) {
all_numbers <- lapply(all_numbers,function(i){i*1000000})
} else if (grepl("billion", chars)) {
all_numbers <- lapply(all_numbers,function(i){i*1000000000})
}
# Return list of numbers, max, or mean depending on "func" input
if (func == "max") {
print("found max")
return(max(unlist(all_numbers)))
} else if (func == "mean") {
print("found mean")
return(mean(unlist(all_numbers)))
} else {
return(all_numbers)
}
}
# Remove bracket numbers
remove_bracket_num <- function(input_string) {
# Return string without bracket numbers
updated_string <- gsub("\\[\\d+\\]", "", input_string)
return(updated_string)
}
# Clean list of genres
clean_genres <- function(input_string) {
# Return cleaned list of genres
updated_string <- gsub(" /",",",input_string)
return(updated_string)
}
# Function to clean wikipedia table
clean_wiki_table <- function(table) {
# Update header
colnames(table) <- c("Artist","Country","Period_Active","Year_First_Charted",
"Genre","Certified_Units","Claimed_Sales")
# Clean columns using wiki_table cleaning functions above
table <- table %>%
mutate_all(funs(remove_bracket_num(.))) %>%
mutate(Claimed_Sales = sapply(lapply(Claimed_Sales, parse_num_list, func = "mean"), `[`, 1)) %>%
mutate(Certified_Units = sapply(lapply(Certified_Units, parse_num_list, func = "max"), `[`, 1)) %>%
mutate(Genre = sapply(lapply(Genre,clean_genres), `[`, 1))
# Return table
return(table)
}
test_table <- clean_wiki_table(above_250mill)
clean_tables <- list()
for (table in tables) {
new_table <- clean_wiki_table(table)
clean_tables <- append(clean_tables, new_table)
}
# Function to parse list of numbers from text
parse_num_list <- function(chars, func = NULL) {
# Define pattern for parsing strings to numbers
parse_num_pattern <- "\\b\\d{1,3}(,\\d{3})*(\\.\\d+)?\\b"
# Extract all numbers in the given string
all_numbers <- str_extract_all(chars, parse_num_pattern)
all_numbers <- as.numeric(gsub(",", "", unlist(all_numbers)))
# Handle case of "million" numbers
if (grepl("million", chars)) {
all_numbers <- lapply(all_numbers,function(i){i*1000000})
}
# Return list of numbers, max, or mean depending on "func" input
if (func == "max") {
return(max(unlist(all_numbers)))
} else if (func == "mean") {
return(mean(unlist(all_numbers)))
} else {
return(all_numbers)
}
}
# Remove bracket numbers
remove_bracket_num <- function(input_string) {
# Return string without bracket numbers
updated_string <- gsub("\\[\\d+\\]", "", input_string)
return(updated_string)
}
# Clean list of genres
clean_genres <- function(input_string) {
# Return cleaned list of genres
updated_string <- gsub(" /",",",input_string)
return(updated_string)
}
# Function to clean wikipedia table
clean_wiki_table <- function(table) {
# Update header
colnames(table) <- c("Artist","Country","Period_Active","Year_First_Charted",
"Genre","Certified_Units","Claimed_Sales")
# Clean columns using wiki_table cleaning functions above
table <- table %>%
mutate_all(funs(remove_bracket_num(.))) %>%
mutate(Claimed_Sales = sapply(lapply(Claimed_Sales, parse_num_list, func = "mean"), `[`, 1)) %>%
mutate(Certified_Units = sapply(lapply(Certified_Units, parse_num_list, func = "max"), `[`, 1)) %>%
mutate(Genre = sapply(lapply(Genre,clean_genres), `[`, 1))
# Return table
return(table)
}
test_table <- clean_wiki_table(above_250mill)
clean_tables <- list()
for (table in tables) {
new_table <- clean_wiki_table(table)
clean_tables <- append(clean_tables, new_table)
}
